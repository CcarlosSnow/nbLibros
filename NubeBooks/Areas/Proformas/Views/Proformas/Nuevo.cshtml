@using NubeBooks.Core.Logistics.DTO
@using NubeBooks.Core.DTO
@using NubeBooks.Models;
@using System.Globalization
@using System.Web.Script.Serialization;
@model ProformaDTO
@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    CultureInfo[] cultures = { new CultureInfo("es-PE") };
}
@section Styles{
    @Styles.Render("~/Content/themes/admin/js/select2/select2.css")
    @Styles.Render("~/Content/themes/admin/js/select2/theme.css")
}
@section Scripts{
    @Scripts.Render("~/Content/themes/admin/js/select2/select2.min.js")
    <script src="~/Scripts/JSLINQ.js"></script>
    <script type="text/javascript">
        var miBaseUrl = '';

        var jslstClientes = JSON.parse('@(Html.Raw(new JavaScriptSerializer().Serialize(ViewBag.lstClientes)))');
        var jslstContactos = JSON.parse('@(Html.Raw(new JavaScriptSerializer().Serialize(ViewBag.lstContactos)))');
        var jslstItems = JSON.parse('@(Html.Raw(new JavaScriptSerializer().Serialize(ViewBag.lstItems)))');

        $(function () {
            miBaseUrl = baseURL(window.location.pathname);

            //$(function () {
            //    $('.datepicker').datetimepicker({
            //        locale: 'es',
            //        format: 'DD/MM/YYYY',
            //        allowInputToggle: true
            //    });
            //});

            $('.miselect2').select2();

            $('.miselect2_clear').select2({
                allowClear: true,
                placeholder: "Seleccionar"
            });

            $('#IdEntidadResponsable').select2({ data: ConvertirClientes(jslstClientes) })
            $('#IdContacto').select2({ data: jslstContactos })
            $('#ddlitem').select2({
                data: ConvertirItems(jslstItems), placeholder: '', initSelection: function (element, callback) {
                }
            });
            ListarContactos(0);
            jslstItems = JSON.parse('@(Html.Raw(new JavaScriptSerializer().Serialize(Model.DetalleProforma)))');

            $('#calendarFechaFacturacion').on('dp.change', function (e) {
                var nCredito = $("#IdEntidadResponsable").select2('data').data.Credito;

                var jsFechaInicio = $("#FechaFacturacion").val().split("/");
                jsFechaInicio = jsFechaInicio[2] + "/" + jsFechaInicio[1] + "/" + jsFechaInicio[0];

                var jsFechaNeo = new Date(jsFechaInicio);
                jsFechaNeo.setDate(jsFechaNeo.getDate() + nCredito);

                $("#FechaCobranza").val(convertDate(jsFechaNeo));
            });
            activarOrdenDeCompra();
        })

        function ResetearValoresItems() {
            $("#txtcantidad").val(1);
            $("#txtprecio").val("0.00");
            $("#txtdescuento").val('0.00');
        }

        function InsertarPrecio() {
            var jsPrecio = parseFloat($("#ddlitem").select2('data').data.PrecioUnidad).toFixed(2);
            var jsItemServicio = $("#ddlitem").select2('data').data.ItemServicio;
            $("#txtprecio").val(jsPrecio);
            $("#hdfItemServicio").val(jsItemServicio);
        }

        function ListarContactos(cambio) {
            var idEntidad = parseInt($('#IdEntidadResponsable').val());
            if (idEntidad > 0) {
                if (cambio == 1) {
                    $('#IdContacto').select2("val", "");
                }

                GetClientesAjax(idEntidad);
                $('#IdContacto').select2({
                    allowClear: true,
                    data: jslstContactos,
                    placeholder: "Seleccionar"
                });
            }
        }

        function GetClientesAjax(idEntidad) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetContactos", "Proformas")',
                async: false,
                cache: false,
                data: { idEntidad: idEntidad },
                dataType: 'json',
                success: function (data) {
                    jslstContactos = ConvertirContactos(data.lista);
                }
            });
        }

        function ConvertirClientes(pLista) {
            var lstClientesAux = [];
            $.each(pLista, function (index, item) {
                lstClientesAux.push({
                    'id': item.IdEntidadResponsable,
                    'text': item.Nombre,
                    'data': item
                });
            });
            return lstClientesAux;
        }

        function ConvertirItems(pLista) {
            var lstItemsAux = [];
            $.each(pLista, function (index, item) {
                lstItemsAux.push({
                    'id': item.IdItem,
                    'text': item.CodigoItem,
                    'data': item
                });
            });
            return lstItemsAux;
        }

        function ConvertirContactos(pLista) {
            var lstContactosAux = [];
            $.each(pLista, function (index, item) {
                lstContactosAux.push({
                    'id': item.IdContacto,
                    'text': item.Nombre,
                    'data': item
                });
            });
            return lstContactosAux;
        }

        function AgregarItem() {
            var jsIdItem = $('#ddlitem').val();

            if (jsIdItem != "") {
                var cadena = '';
                if ($("#txtcantidad").val() == "") cadena += "Debe de ingresar una cantidad\n";
                if ($("#txtprecio").val() == "") cadena += "Debe de ingresar un precio\n";
                if ($("#txtcantidad").val() == "0.00") cadena += "Debe de ingresar una cantidad mayor a cero\n";
                if ($("#txtprecio").val() == "0.00") cadena += "Debe de ingresar un precio mayor a cero\n";
                if (cadena != "") { alert(cadena); return; }

                var precio = parseFloat($("#txtprecio").val());
                var descuento = parseFloat($("#txtdescuento").val());
                var itemservicio = $("#hdfItemServicio").val();

                var items01 = JSLINQ(jslstItems).Where(function (item) {
                    return item.IdItem == jsIdItem &&
                           item.ItemServicio == itemservicio &&
                           item.PrecioUnidad == precio &&
                           item.PorcentajeDescuento == descuento;
                }).Select(function (item) { return item; });

                if (items01.items.length == 0) {
                    var lista = {};
                    lista.IdItem = jsIdItem;
                    lista.NombreItem = $('#ddlitem').select2('data').text;
                    lista.Cantidad = parseInt($("#txtcantidad").val());
                    lista.PrecioUnidad = parseFloat($("#txtprecio").val());
                    lista.UnidadMedida = $("#ddlitem").select2('data').data.UnidadMedida;
                    lista.TipoCambio = 3.30;
                    lista.PorcentajeIgv = 18;
                    lista.PorcentajeDescuento = descuento;
                    lista.Igv = ((lista.Cantidad * lista.PrecioUnidad) * (lista.PorcentajeIgv / 100)).toFixed(2);
                    lista.MontoTotal = (lista.Cantidad * lista.PrecioUnidad).toFixed(2);
                    lista.Descuento = (lista.MontoTotal * (descuento / 100)).toFixed(2);
                    lista.MontoTotal = (lista.MontoTotal - lista.Descuento).toFixed(2);
                    lista.ItemServicio = $('#ddlitem').select2('data').data.ItemServicio;
                    jslstItems.push(lista);
                    llenartabla();
                    $("#ddlitem").select2("val", "");
                    ResetearValoresItems();
                }
                else {
                    items01 = items01.items[0];
                    items01.Cantidad = items01.Cantidad + parseInt($("#txtcantidad").val());
                    items01.MontoTotal = (items01.Cantidad * items01.PrecioUnidad).toFixed(2);
                    items01.Descuento = (items01.MontoTotal * (descuento / 100)).toFixed(2);
                    items01.MontoTotal = (items01.MontoTotal - items01.Descuento).toFixed(2);
                    llenartabla();
                    $("#ddlitem").select2("val", "");
                    ResetearValoresItems();
                    alert('Se modificó la cantidad del Item ' + items01.IdItem);
                }
            }
        }
        function deleteRow(btn) {
            jslstItems = $.grep(jslstItems, function (e) {
                return e.IdItem != $(btn).data("id");
            });
            $(btn).closest("tr").remove();
            GetTotales();
        }

        function SubirListaItems() {
            var lista = [];
            lista = JSON.stringify({ 'lista': jslstItems });
            $.ajax({
                type: 'POST',
                url: '@Url.Action("PasslstItems","Proformas")',
                data: lista,
                contentType: 'application/json',
                dataType: 'json',
                success: function (data) {
                    return true;
                },
                error: function (xhr, status, error) {
                    return false;
                }
            });
        }

        function GetDetalle(idproforma) {
            $.ajax({
                url: '/Proformas/Proforma/GetDetalleProforma',
                type: "POST",
                dataType: "json",
                data: { IdProforma: idproforma },
                success: function (data) {
                    if (typeof (data) == 'object') {
                        jslstItems = data;
                        llenartabla();
                    }
                }
            }).fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                alert(err);
            }).always(function () {
            });
        }

        function llenartabla() {
            $("#tblitem tbody").empty();
            $.each(jslstItems, function (i, e) {
                $("#tblitem tbody").append('<tr><td>' + (i + 1) + '</td><td>' + e.IdItem + '</td><td>' + e.NombreItem + '</td><td>' + e.Cantidad
                    + '</td><td>' + e.UnidadMedida + '</td><td>' + e.PrecioUnidad + '</td><td>' + e.Descuento +
                    '</td><td>' + e.MontoTotal + '</td><td><span class="glyphicon glyphicon-remove" data-id="' + e.IdItem + '" style="cursor:pointer" onclick="deleteRow(this)"></span></td></tr>');
            });

            GetTotales();
        }

        function GetTotales() {
            var total = 0, igv = 0;
            $.each(jslstItems, function (i, e) {
                total += parseFloat(e.MontoTotal); igv += parseFloat(e.Igv);
            });
            $(".totaligv").text(parseFloat(igv).toFixed(2));
            $(".total").text(parseFloat((total + igv)).toFixed(2));
        }

        function activarOrdenDeCompra() {
            $('#divOrdenCompra').addClass('hidden');
            $('#divFechaFacturacion').addClass('hidden');
            $('#divFechaCobranza').addClass('hidden');
            $('#divMotivoRechazo').addClass('hidden');

            if ($('#IdEstado').val() == '0602') {
                $('#divOrdenCompra').removeClass('hidden');
                $('#divFechaFacturacion').removeClass('hidden');
                $('#divFechaCobranza').removeClass('hidden');
            } else if ($('#IdEstado').val() == '0603') {
                $('#divMotivoRechazo').removeClass('hidden');
            }
        }

        function ActualizarFechaCobranza() {
            var nCredito = $("#IdEntidadResponsable").select2('data').data.Credito;

            console.log(nCredito);

            var jsFechaInicio = $("#FechaFacturacion").val().split("/");
            jsFechaInicio = jsFechaInicio[2] + "/" + jsFechaInicio[1] + "/" + jsFechaInicio[0];

            var jsFechaNeo = new Date(jsFechaInicio);
            jsFechaNeo.setDate(jsFechaNeo.getDate() + nCredito);

            $("#FechaCobranza").val(convertDate(jsFechaNeo));
        }
    </script>
}
@{var cadena = "";}
@if (Model == null || Model.IdProforma == 0) { cadena = "Nueva"; }
else { cadena = "Actualizar"; }
<div class="bg-light lter b-b wrapper-md">
    <h1 class="m-n font-thin h3">@cadena Proforma</h1>
</div>
<div class="wrapper-md" ng-controller="FormDemoCtrl">
    <div class="panel panel-default">
        <div class="panel-body">
            @using (Html.BeginForm("AddProforma", "Proformas", new { Area = "Proformas" }, FormMethod.Post))
            {
                @Html.Partial("_showAlertMessages")
                @Html.ValidationSummary(true)

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="control-label">Número de Proforma</label>
                            <div class="input-group">
                                @Html.TextBoxFor(u => u.CodigoProforma, new { @class = "form-control", @type = "text", @readonly = "" })
                                <span class="input-group-addon">
                                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Fecha de Proforma</label>
                            <div class="input-group date">
                                @Html.TextBoxFor(u => u.FechaProforma, "{0:dd/MM/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy", @type = "text", @required = "" })
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Cliente</label>
                            @Html.TextBoxFor(u => u.IdEntidadResponsable, new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder rol-accs", @required = "", @onchange = "ListarContactos(1)" })
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Contacto</label>
                            @Html.TextBoxFor(u => u.IdContacto, new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder rol-accs", @required = "" })
                            @*<select id="ddlconsultor" class="form-control">
                                    <option value="">Seleccione un contacto...</option>
                                </select>*@
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="control-label">Validez de Oferta</label>
                            <select class="form-control col-xs-12 col-sm-12 col-md-12 no-padder rol-accs" id="ValidezOferta" name="ValidezOferta" required>
                                @{
                                    List<SelectItem> lstValidezOferta = new List<SelectItem>();
                                    lstValidezOferta.Add(new SelectItem { valor = 7, nombre = "7 días" });
                                    lstValidezOferta.Add(new SelectItem { valor = 15, nombre = "15 días" });
                                    lstValidezOferta.Add(new SelectItem { valor = 30, nombre = "30 días" });
                                    var pValidezOferta = Model != null ? Model.ValidezOferta : 1;
                                }
                                @foreach (var jslstItems in lstValidezOferta)
                                {
                                <option value="@jslstItems.valor" @(jslstItems.valor == pValidezOferta ? "selected=selected" : "")>@jslstItems.nombre</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Método de Pago</label>
                            @Html.TextBoxFor(u => u.MetodoPago, new { @class = "form-control", @placeholder = "Metodo de Pago", @type = "text" })
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Fecha de Entrega</label>
                            <div class="input-group date">
                                @Html.TextBoxFor(u => u.FechaEntrega, "{0:dd/MM/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy", @type = "text", @required = "" })
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Lugar de Entrega</label>
                            @Html.TextBoxFor(u => u.LugarEntrega, new { @class = "form-control", @placeholder = "Lugar", @type = "text" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="control-label">Moneda</label>
                            @Html.DropDownListFor(u => u.IdMoneda, new SelectList(ViewBag.lstMonedas, "IdMoneda", "Nombre", Model != null ? (Model.IdMoneda != 0 ? Model.IdMoneda : 0) : 0), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="control-label">Ítem / Servicio</label>
                            @Html.TextBox("ddlitem", "", new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder rol-accs", @onchange = "ResetearValoresItems(); InsertarPrecio();" })
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Cantidad</label>
                            @Html.TextBox("txtcantidad", 1, new { @class = "form-control rol-accs", @placeholder = "1", @type = "number", @min = "0", @step = "1" })
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Precio Unitario</label>
                            <div class="input-group">
                                <span class="input-group-addon">S/.</span>
                                @Html.TextBox("txtprecio", 0.00, "{0:0.00}", new { @class = "form-control rol-accs", @placeholder = "0.00", @type = "number" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Descuento</label>
                            <div class="input-group">
                                @Html.TextBox("txtdescuento", 0.00, "{0:0.00}", new { @class = "form-control rol-accs", @placeholder = "0.00", @type = "number" })
                                <span class="input-group-addon">%</span>
                            </div>
                        </div>
                        @Html.Hidden("hdfItemServicio", "")
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <button id="btnagregar" type="button" class="form-control btn m-b-xs btn-md btn-default btn-addon" onclick="AgregarItem();"><i class="fa fa-plus"></i>Agregar ítem</button>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <table id="tblitem" class="table table-striped m-b-none">
                        <thead>
                            <tr>
                                <th class="text-center">Ítem</th>
                                <th class="text-center">Código</th>
                                <th class="text-left">Descripción</th>
                                <th class="text-center">Cantidad</th>
                                <th class="text-left">U/M</th>
                                <th class="text-center">Precio Unitario</th>
                                <th class="text-center">Descuento</th>
                                <th class="text-center">Precio Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model != null && Model.DetalleProforma.Count > 0)
                            {
                                int cont = 1;
                                foreach (var jslstItems in Model.DetalleProforma)
                                {
                                    <tr>
                                        <td class="text-center">@cont</td>
                                        <td class="text-center">@jslstItems.IdItem</td>
                                        <td class="text-left">@jslstItems.NombreItem</td>
                                        <td class="text-center">@jslstItems.Cantidad</td>
                                        <td class="text-left">@jslstItems.UnidadMedida</td>
                                        <td class="text-center">@jslstItems.PrecioUnidad</td>
                                        <td class="text-center">@jslstItems.Descuento.GetValueOrDefault().ToString("N2", CultureInfo.InvariantCulture)</td>
                                        <td class="text-center">@jslstItems.MontoTotal.GetValueOrDefault().ToString("N2", CultureInfo.InvariantCulture)</td>
                                        <td><span class="glyphicon glyphicon-remove" data-id="@jslstItems.IdItem" style="cursor:pointer" onclick="deleteRow(this)"></span></td>
                                    </tr>
                                    cont++;
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="7" class="text-right"><strong>IGV</strong></td>
                                <td class="text-right"><span class="totaligv">@Model.DetalleProforma.Sum(x => x.Igv).GetValueOrDefault().ToString("N2", CultureInfo.InvariantCulture)</span></td>
                                <td></td>
                            </tr>
                            <tr>
                                <td colspan="7" class="text-right"><strong>Total</strong></td>
                                <td class="text-right"><span class="total">@Model.DetalleProforma.Sum(x => x.MontoTotal + x.Igv).GetValueOrDefault().ToString("N2", CultureInfo.InvariantCulture)</span></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-12">
                            <label>Observaciones de la Proforma</label>
                            @Html.TextAreaFor(u => u.ComentarioProforma, new { @class = "form-control", @placeholder = "Observaciones", @type = "text", @rows = "3", @style = "resize: none;" })
                        </div>
                    </div>
                </div>
                    <div class="line line-dashed b-b line-lg pull-in"></div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-12">
                                <label>Cuentas Bancarias</label>
                                <select id="IdCuentaBancaria" name="IdCuentaBancaria" multiple ui-jq="chosen" class="w-full" data-placeholder="Seleccione las cuentas bancarias...">
                                    @{ var pCuenta = Model != null ? Model.IdCuentaBancaria : 0; }
                                    @foreach (var nCuenta in (List<CuentaBancariaDTO>)ViewBag.lstCuentasBancarias)
                                    {
                                        <option value="@nCuenta.IdCuentaBancaria" @(nCuenta.IdCuentaBancaria == pCuenta ? "selected=selected" : "")>@nCuenta.NombreCuenta</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="line line-dashed b-b line-lg pull-in"></div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                <label class="control-label">Estado</label>
                                @Html.DropDownListFor(u => u.IdEstado, new SelectList(ViewBag.lstEstadosProforma, "IdParametro", "Nombre", Model != null ? (Model.IdEstado != "0" ? Model.IdEstado : "0") : "0"), new { @class = "form-control", @onchange = "activarOrdenDeCompra()" })
                            </div>
                            <div id="divOrdenCompra" class="col-md-3">
                                <label class="control-label">Orden de Compra del Cliente</label>
                                @Html.TextBoxFor(u => u.OrdenCompra, new { @class = "form-control", @placeholder = "Orden de Compra", @type = "text" })
                            </div>
                            <div id="divFechaFacturacion" class="col-md-3">
                                <label class="control-label">Fecha Estimada de Facturación</label>
                                <div id="calendarFechaFacturacion" class="input-group date">
                                    @Html.TextBoxFor(u => u.FechaFacturacion, "{0:dd/MM/yyyy}", new { @class = "form-control rol-accs", @placeholder = "dd/mm/yyyy", @type = "text" })
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                </div>
                            </div>
                            <div id="divFechaCobranza" class="col-md-3">
                                <label class="control-label">Fecha Estimada de Cobranza</label>
                                <div class="input-group">
                                    @Html.TextBoxFor(u => u.FechaCobranza, "{0:dd/MM/yyyy}", new { @class = "form-control rol-accs", @placeholder = "dd/mm/yyyy", @type = "text", @readonly = "" })
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                </div>
                            </div>
                            <div id="divMotivoRechazo" class="col-md-3">
                                <label class="control-label">Motivo</label>
                                @Html.DropDownListFor(u => u.IdMotivoRechazo, new SelectList(ViewBag.lstMotivosRechazo, "IdParametro", "Nombre", Model != null ? (Model.IdMotivoRechazo != "0" ? Model.IdMotivoRechazo : "0") : ""), new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="line line-dashed b-b line-lg pull-in"></div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Comentarios Adicionales</label>
                                @Html.TextAreaFor(u => u.ComentarioAdiccional, new { @class = "form-control", @placeholder = "Comentarios", @type = "text", @rows = "3", @style = "resize: none;" })
                            </div>
                        </div>
                    </div>

                    @*@Html.TextBoxFor(u => u.CodigoProforma, new { @value = Model.CodigoProforma, @type = "hidden" })*@
                                        @Html.TextBoxFor(u => u.IdEmpresa, new { @value = Model.IdEmpresa, @type = "hidden" })
                                        @Html.TextBoxFor(u => u.IdProforma, new { @value = Model.IdProforma != 0 ? Model.IdProforma.ToString() : "0", @type = "hidden" })
                                        <div class="line line-dashed b-b line-lg pull-in"></div>

                                        <div class="form-group">
                                            <div class="row">
                                                <div class="col-sm-12">
                                                    @{var btnName = (Model != null && Model.IdProforma > 0) ? "Guardar Cambios" : "Crear";}
                                                    @if (!ViewBag.EsUsuarioExterno)
                                                    {<button type="submit" class="btn btn-success" onclick="return SubirListaItems();">@btnName</button>}
                                                    <a class="btn btn-default" href="@Url.Action("Index", "Proformas")">Cancelar</a>
                                                </div>
                                            </div>
                                        </div>
                                                        }
        </div>
    </div>
</div>
